     1                                  bits 32
     2                                  
     3                                  global start
     4                                  
     5                                  extern printf
     6                                  import printf msvcrt.dll
     7                                  extern scanf
     8                                  import scanf msvcrt.dll 
     9                                  extern exit
    10                                  import exit msvcrt.dll
    11                                  
    12                                  segment data use32 class=data
    13 00000000 <res 00000028>               dword_string resd 10
    14 00000028 <res 00000028>               byte_string resd 10
    15 00000050 00000000                     n dd 0
    16 00000054 00000000                     suma dd 0
    17 00000058 256400                       format_d db "%d",0
    18 0000005B 00000000                     aux dd 0
    19                                  segment code use32 class=code
    20                                      start:
    21 00000000 68[50000000]                    push dword n
    22 00000005 68[58000000]                    push dword format_d
    23 0000000A FF15[00000000]                  call[scanf]
    24 00000010 83C408                          add esp, 4*2
    25 00000013 BF[00000000]                    mov edi, dword_string
    26 00000018 8B0D[50000000]                  mov ecx, [n]
    27 0000001E 83F900                          cmp ecx, 0
    28 00000021 E368                            jecxz ending
    29                                          citire:
    30 00000023 51                                  push ecx
    31 00000024 68[5B000000]                        push dword aux
    32 00000029 68[58000000]                        push dword format_d
    33 0000002E FF15[00000000]                      call[scanf]
    34 00000034 83C408                              add esp, 4*2
    35 00000037 59                                  pop ecx
    36 00000038 A1[5B000000]                        mov eax, [aux]
    37 0000003D AB                                  stosd
    38 0000003E E2E3                            loop citire
    39 00000040 BE[00000000]                    mov esi, dword_string
    40 00000045 BF[28000000]                    mov edi, byte_string
    41 0000004A 8B0D[50000000]                  mov ecx, [n]
    42                                          counting_even:
    43 00000050 AD                                  lodsd
    44 00000051 C705[54000000]0000-                 mov dword [suma],0
    44 00000059 0000               
    45                                              digits:
    46 0000005B 83F800                                  cmp eax,0
    47 0000005E 7414                                    je next_number
    48 00000060 BB0A000000                              mov ebx,10
    49 00000065 F7F3                                    div ebx
    50 00000067 F6C201                                  test dl,1
    51 0000006A 7506                                    jnz next_digit
    52 0000006C 0015[54000000]                          add [suma], dl
    53                                                  next_digit:
    54 00000072 EBE7                                jmp digits
    55                                              next_number:
    56 00000074 FF35[54000000]                      push dword [suma]
    57 0000007A 68[58000000]                        push dword format_d
    58 0000007F FF15[00000000]                      call [printf]
    59 00000085 83C408                              add esp, 4*2
    60 00000088 AA                                  stosb 
    61 00000089 E2C5                            loop counting_even
    62                                             
    63                                          ending:
    64 0000008B FF3500000000                    push dword [0]
    65 00000091 FF15[00000000]                  call[exit]
