     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern fscanf
     8                                  import fscanf msvcrt.dll
     9                                  extern fprintf
    10                                  import fprintf msvcrt.dll
    11                                  extern scanf
    12                                  import scanf msvcrt.dll
    13                                  extern fopen
    14                                  import fopen msvcrt.dll
    15                                  extern printf
    16                                  import printf msvcrt.dll
    17                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    18                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    19                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    20                                  ;Se citeste de la tastatura un nume de fisier input.txt si un caracter c. Fisierul input.txt contine cuvinte separate prin spatiu. Sa se scrie in fisierul output.txt doar cuvintele in care apare caracterul c citit p
    21                                  
    22                                  ;input.txt: totem ochi bidon tort    c: o     output.txt: totem tort
    23                                  ; our data is declared here (the variables needed by our program)
    24                                  segment data use32 class=data
    25                                      ; ...
    26 00000000 <res 00000064>              input_file resb 100
    27 00000064 6F75747075742E7478-         output_file db "output.txt", 0
    27 0000006D 7400               
    28                                      ;file_name resb 1000
    29 0000006F FFFFFFFF                    file_descriptor_i dd -1
    30 00000073 FFFFFFFF                    file_descriptor_o dd -1
    31 00000077 25732000                    format_s db "%s ", 0
    32 0000007B 256300                      format_c db "%c", 0
    33 0000007E <res 00000001>              chr resb 1
    34 0000007F 7200000000000000            access_mode_r dd "r", 0
    35 00000087 7700000000000000            access_mode_w dd "w", 0
    36 0000008F <res 000000C8>              string resb 200
    37                                  ; our code starts here
    38                                  segment code use32 class=code
    39                                      start:
    40                                          ; ...
    41 00000000 68[00000000]                    push dword input_file
    42 00000005 68[77000000]                    push dword format_s
    43 0000000A FF15[00000000]                  call [scanf]
    44 00000010 83C408                          add esp, 4*2
    45                                          
    46 00000013 68[7E000000]                    push dword chr
    47 00000018 68[7B000000]                    push dword format_c
    48 0000001D FF15[00000000]                  call [scanf]
    49 00000023 83C408                          add esp, 4*2
    50                                          
    51 00000026 68[7F000000]                    push dword access_mode_r    
    52 0000002B 68[00000000]                    push dword input_file
    53 00000030 FF15[00000000]                  call [fopen]
    54 00000036 83C408                          add esp, 4*2  
    55                                          
    56 00000039 A3[6F000000]                    mov [file_descriptor_i], eax  
    57                                          
    58 0000003E 83F800                          cmp eax, 0
    59 00000041 746C                            jz final
    60                                          
    61 00000043 68[87000000]                    push dword access_mode_w    
    62 00000048 68[64000000]                    push dword output_file
    63 0000004D FF15[00000000]                  call [fopen]
    64 00000053 83C408                          add esp, 4*2  
    65                                          
    66 00000056 A3[73000000]                    mov [file_descriptor_o], eax  
    67                                          
    68 0000005B 83F800                          cmp eax, 0
    69 0000005E 744F                            jz final
    70                                          
    71                                      read:
    72 00000060 68[8F000000]                    push dword string
    73 00000065 68[77000000]                    push dword format_s
    74 0000006A FF35[6F000000]                  push dword [file_descriptor_i]
    75 00000070 FF15[00000000]                  call [fscanf]
    76 00000076 83C40C                          add esp, 4*3
    77                                          
    78 00000079 83F8FF                          cmp eax, -1
    79 0000007C 7431                            je final
    80                                          
    81 0000007E BE[8F000000]                    mov esi, string
    82                                          compare:
    83 00000083 803E00                              cmp byte[esi], 0
    84 00000086 74D8                                je read
    85 00000088 AC                                  lodsb
    86 00000089 AC                                  lodsb
    87 0000008A 3A05[7E000000]                      cmp al, [chr]
    88 00000090 7402                                je write
    89 00000092 EBCC                                jmp read
    90                                              write:
    91 00000094 68[8F000000]                            push dword string
    92 00000099 68[77000000]                            push dword format_s
    93 0000009E FF35[73000000]                          push dword [file_descriptor_o]
    94 000000A4 FF15[00000000]                          call [fprintf]
    95 000000AA 83C40C                                  add esp, 4*3
    96 000000AD EBB1                                    jmp read
    97                                      final:
    98                                          ; exit(0)
    99 000000AF 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   100 000000B1 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
