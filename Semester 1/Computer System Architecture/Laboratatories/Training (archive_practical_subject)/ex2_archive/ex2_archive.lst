     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern printf
     8                                  import printf msvcrt.dll
     9                                  extern scanf
    10                                  import scanf msvcrt.dll
    11                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    12                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    13                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    14                                  
    15                                  ;Se citeste de la tastatura un cuvant si un numar. 
    16                                  ;Daca numarul este par se cere criptarea cuvantului prin adunarea la fiecare caracter a numarului 20. 
    17                                  ;Daca numarul este impar se cere criptarea cuvantului prin adaugarea dupa fiecare vocala a gruparii "p"+vocala.
    18                                  ;Se cere afisarea cuvantului criptat.
    19                                  
    20                                  ; our data is declared here (the variables needed by our program)
    21                                  segment data use32 class=data
    22                                      ; ...
    23 00000000 256400                      format_d db "%d", 0
    24 00000003 257300                      format_s db "%s", 0
    25 00000006 <res 00000064>              string resb 100
    26 0000006A 00000000                    numar dd 0
    27 0000006E <res 00000096>              new_string resb 150
    28                                  
    29                                  ; our code starts here
    30                                  segment code use32 class=code
    31                                      start:
    32                                          ; ...
    33 00000000 68[6A000000]                    push dword numar
    34 00000005 68[00000000]                    push dword format_d
    35 0000000A FF15[00000000]                  call [scanf]
    36 00000010 83C408                          add  esp, 4*2
    37                                          
    38 00000013 68[06000000]                    push dword string
    39 00000018 68[03000000]                    push dword format_s
    40 0000001D FF15[00000000]                  call [scanf]
    41 00000023 83C408                          add  esp, 4*2
    42                                          
    43 00000026 66A1[6A000000]                  mov ax, [numar]
    44 0000002C 66A90100                        test ax, 1
    45 00000030 7502                            jnz odd_number
    46 00000032 743E                            jz even_number
    47                                          
    48                                          odd_number:
    49 00000034 BE[06000000]                        mov esi, string
    50 00000039 BF[6E000000]                        mov edi, new_string
    51 0000003E 803E00                              cmp byte [esi], 0   ; check for the null terminator
    52 00000041 7444                                je pre_final
    53                                              loop_odd:
    54 00000043 AC                                      lodsb ; load a character from the input string
    55 00000044 3C61                                    cmp al, 'a'
    56 00000046 7C22                                    jl next_odd
    57 00000048 3C7A                                    cmp al, 'z'
    58 0000004A 7F1E                                    jg next_odd
    59 0000004C 3C61                                    cmp al, 'a'
    60 0000004E 7412                                    je vowel
    61 00000050 3C65                                    cmp al, 'e'
    62 00000052 740E                                    je vowel
    63 00000054 3C69                                    cmp al, 'i'
    64 00000056 740A                                    je vowel
    65 00000058 3C6F                                    cmp al, 'o'
    66 0000005A 7406                                    je vowel
    67 0000005C 3C75                                    cmp al, 'u'
    68 0000005E 7402                                    je vowel
    69 00000060 EB08                                    jmp next_odd
    70                                              vowel:
    71 00000062 AA                                      stosb ; store the vowel in the output string
    72 00000063 88C3                                    mov bl, al
    73 00000065 B070                                    mov al, 'p'
    74 00000067 AA                                      stosb ; store the 'p' after the vowel
    75 00000068 88D8                                    mov al, bl ; reload the current
    76                                              next_odd:
    77 0000006A AA                                      stosb ; store the current character in the output string
    78 0000006B 803E00                                  cmp byte [esi], 0   ; check for the null terminator
    79 0000006E 75D3                                    jne loop_odd
    80 00000070 EB15                                    jmp pre_final
    81                                          even_number:
    82 00000072 BE[06000000]                        mov esi, string
    83 00000077 BF[6E000000]                        mov edi, new_string
    84                                              encryption:
    85 0000007C AC                                      lodsb
    86 0000007D 0414                                    add al, 20      ; encryption by adding 20 to each character
    87 0000007F AA                                      stosb
    88 00000080 803E00                                  cmp byte [esi], 0   ; check for the null terminator
    89 00000083 7402                                    je pre_final
    90 00000085 EBF5                                    jmp encryption
    91                                          pre_final:
    92 00000087 803F00                              cmp byte [edi], 0   ; check for the null terminator
    93 0000008A 7400                                je final 
    94                                          ; exit(0)
    95                                      final:
    96 0000008C 68[6E000000]                    push new_string
    97 00000091 68[03000000]                    push dword format_s
    98 00000096 FF15[00000000]                  call [printf]
    99 0000009C 83C408                          add esp, 4*2
   100                                          
   101 0000009F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   102 000000A1 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
