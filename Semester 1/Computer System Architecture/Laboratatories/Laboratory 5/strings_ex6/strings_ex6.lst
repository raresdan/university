     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  
    13                                  ;A byte string S is given. 
    14                                  ;Obtain the string D by concatenating the elements found on the even positions of S and then the elements found on the odd positions of S.
    15                                  ;Example:
    16                                  ;S: 1, 2, 3, 4, 5, 6, 7, 8
    17                                  ;D: 1, 3, 5, 7, 2, 4, 6, 8
    18                                  
    19                                  segment data use32 class=data
    20                                      ; ...
    21 00000000 0102030405060708            s db 1, 2, 3, 4, 5, 6, 7, 8
    22                                      l equ $-s
    23                                      mid equ l/2
    24 00000008 <res 00000008>              d resb l
    25 00000010 0200                        a dw 2
    26                                  ; our code starts here
    27                                  segment code use32 class=code
    28                                      start:
    29                                          ; ...
    30 00000000 B908000000                  mov ecx, l
    31 00000005 31F6                        xor esi, esi
    32 00000007 E326                        jecxz out
    33                                      repeat:
    34 00000009 BA[00000000]                    mov edx, s  ;edx = begging of s
    35 0000000E 8A1C32                          mov bl, [edx + esi]; the value computed as [begging adress (s) + esi] ; esi initially 0
    36                                          ;test bl, 01h ; test if number is odd or even (if odd => ZF = 0 else if even => ZF = 1
    37                                          
    38 00000011 BA[08000000]                    mov edx, d
    39 00000016 881C32                          mov [edx + esi], bl ;add the odd numbers in order until the middle of the string
    40 00000019 49                              dec ecx
    41 0000001A 46                              inc esi
    42                                          
    43 0000001B BA[00000000]                    mov edx, s
    44 00000020 8A1C32                          mov bl, [edx+esi]
    45 00000023 BA[08000000]                    mov edx, d
    46 00000028 885C3203                        mov [edx + esi + mid-1], bl    ;we add the even numbers from the middle onwards 
    47 0000002C 46                              inc esi
    48 0000002D E2DA                        loop repeat
    49                                      out:
    50                                      ; exit(0)
    51 0000002F 6A00                        push    dword 0      ; push the parameter for exit onto the stack
    52 00000031 FF15[00000000]              call    [exit]       ; call exit to terminate the program
