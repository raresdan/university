     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern scanf
     8                                  import scanf msvcrt.dll
     9                                  extern printf
    10                                  import printf msvcrt.dll
    11                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    12                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    13                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    14                                  
    15                                  ;Read numbers (in base 10) in a loop until the digit '0' is read from the keyboard. Determine and display the smallest number from those that have been read.
    16                                  ; our data is declared here (the variables needed by our program)
    17                                  segment data use32 class=data
    18 00000000 <res 0000000A>              num resb 10
    19 0000000A <res 00000064>              sir resb 100
    20 0000006E 256400                      format db '%d',0
    21 00000071 00000000                    min_num dd 0
    22                                  
    23                                  segment code use32 class=code
    24                                      start:
    25 00000000 BF00000000                      mov edi, 0
    26 00000005 B800000000                      mov eax, 0
    27 0000000A C705[71000000]4042-             mov dword [min_num], 1000000 ;initialize min_num to a large number
    27 00000012 0F00               
    28                                          
    29                                      read:
    30 00000014 68[00000000]                    push dword num
    31 00000019 68[6E000000]                    push dword format
    32 0000001E FF15[00000000]                  call [scanf]
    33 00000024 83C408                          add esp, 4*2
    34                                          
    35 00000027 A1[00000000]                    mov eax, dword [num]    ; move the read integer into eax so it can be compared to 0
    36 0000002C 83F800                          cmp eax, 0
    37 0000002F 7411                            je print                ; if the input is 0 print the min_num
    38                                          
    39 00000031 3B05[71000000]                  cmp eax, [min_num]      ; if the input is not 0 and is smaller than the current min_num, update the value
    40 00000037 7C02                            jl update_min
    41 00000039 EBD9                            jmp read                ; 'loop' read until the user inputs value 0
    42                                          
    43                                      update_min:
    44 0000003B A3[71000000]                    mov dword [min_num], eax; update the min_num with the new min value
    45 00000040 EBD2                            jmp read                ; go back until the user inputs 0 
    46                                          
    47                                      print:
    48 00000042 FF35[71000000]                  push dword [min_num]
    49 00000048 68[6E000000]                    push dword format
    50 0000004D FF15[00000000]                  call [printf]
    51 00000053 83C408                          add esp, 4*2
    52                                          
    53 00000056 6A00                            push dword 0
    54 00000058 FF15[00000000]                  call [exit]
