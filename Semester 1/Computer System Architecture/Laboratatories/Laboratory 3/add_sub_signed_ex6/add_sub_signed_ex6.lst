     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ;c-(d+a)+(b+c)=-8-(3+1)+(4-8)=-8-4-4=-16
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14                                      ; ...
    15 00000000 01                          a db 1
    16 00000001 0400                        b dw 4
    17 00000003 F8FFFFFF                    c dd -8
    18 00000007 0300000000000000            d dq 3
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23 00000000 A0[00000000]                    mov al, [a]
    24 00000005 6698                            cbw
    25 00000007 98                              cwde
    26 00000008 99                              cdq             ;edx:eax = a
    27 00000009 8B1D[07000000]                  mov ebx, [d]
    28 0000000F 8B0D[0B000000]                  mov ecx, [d+4]  ; ecx:ebx = d
    29 00000015 01C3                            add ebx, eax
    30 00000017 11D1                            adc ecx, edx    ; ecx:ebx = (d+a)
    31 00000019 F8                              clc
    32 0000001A 66A1[01000000]                  mov ax, [b]
    33 00000020 98                              cwde            ; eax = b
    34 00000021 8B15[03000000]                  mov edx, [c]
    35 00000027 01D0                            add eax, edx    ; eax = (b+c)
    36 00000029 BA00000000                      mov edx, 0
    37 0000002E 01C3                            add ebx, eax
    38 00000030 11D1                            adc ecx, edx    ; ecx:ebx = (d+a)+(b+c)
    39 00000032 F8                              clc
    40 00000033 A1[03000000]                    mov eax, [c]
    41 00000038 99                              cdq
    42 00000039 BA00000000                      mov edx, 0      ; edx:eax = c
    43 0000003E 29D8                            sub eax, ebx
    44 00000040 19CA                            sbb edx, ecx
    45                                          
    46                                          
    47                                          
    48                                          ; exit(0)
    49 00000042 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    50 00000044 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
